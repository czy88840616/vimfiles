*voom.txt*      Two-pane outliner and related utilities
VOoM (Vim Outliner of Markers): two-pane outliner and related utilities
plugin for Python-enabled Vim version 7.x
Website: http://www.vim.org/scripts/script.php?script_id=2657
Author:  Vlad Irnov (vlad DOT irnov AT gmail DOT com)
License: This documentation is released under the Do What The Fuck You Want To
         Public License, Version 2. See http://sam.zoy.org/wtfpl/COPYING
Version: 2.0, 2010-04-01


Overview  . . . . . . . . . . . . . . . . . . . .|voom_overview|
Requirements  . . . . . . . . . . . . . . . . . .|voom_requirements|
Installation  . . . . . . . . . . . . . . . . . .|voom_install|
Options . . . . . . . . . . . . . . . . . . . . .|voom_options|
ALL MAPPINGS & COMMANDS . . . . . . . . . . . . .|voom_map|
OUTLINING (:Voom) . . . . . . . . . . . . . . . .|voom_Voom|
EXECUTING NODES (:Voomexec) . . . . . . . . . . .|voom_Voomexec|
__PyLog__ BUFFER (:Voomlog) . . . . . . . . . . .|voom_Voomlog|
Implementation notes  . . . . . . . . . . . . . .|voom_notes|

==============================================================================
Overview   [[[1~
                                                 *voom_overview*
VOoM (Vim Outliner of Markers) is a plugin for Vim that emulates a two-pane
text outliner. It can be used with any buffer that has start fold markers with
level numbers, such as in this help file. (See |fold-marker|.  Markers are
specified by option 'foldmarker'.) The only restriction is that the buffer
should have no end fold markers with levels.

VOoM is not a |filetype| plugin. It is mostly a utility for for navigating and
manipulating start fold markers with levels. Numbered markers are versatile
for organizing all kinds of files.

Screenshots and an animation: http://vim-voom.webs.com/

There are four main Ex commands: Voom, Voomhelp, Voomexec, Voomlog.

:Voom       Create outline of the current buffer. Outline is constructed from
            lines with start fold markers with level numbers, which become
            headlines. Outline is displayed in a special buffer in a separate
            window which emulates the tree pane of a two-pane outliner. Such
            buffers are referred to as Tree buffers. The current buffer
            becomes a Body buffer. Each Tree line is associated with a region
            (usually a fold) of the corresponding Body called node. Nodes can
            can be navigated and manipulated from the Tree: moved up/down,
            promoted/demoted, copied/cut/pasted, marked/unmarked, etc.
            See OUTLINING (|voom_Voom|) for details.

                                                 *voom_Voomhelp*
:Voomhelp   Open help file voom.txt as outline in a new tabpage. If voom.txt
            is installed via |helptags|, it is opened as a Vim help file
            (:tab help voom.txt) so that all tags will be active.


The VOoM plugin also includes two utilities useful when working with Vim and
Python scripts. They can be used independently of the outlining functionality
provided by the command :Voom. These utilities attempt to emulate similar
features of Leo outlining editor.

:Voomexec   Execute text in the current node or fold as Vim script or Python
            script. This is useful for testing code snippets and for
            organizing scripts by segregating them into folds. This command
            does not require an outline to be created and can be used with any
            buffer that has folds and has fold method set to marker.
            See EXECUTING SCRIPTS (|voom_Voomexec|) for details.

:Voomlog    Create scratch buffer __PyLog__ and redirect Python stdout and
            stderr to that buffer. This is useful when developing Python
            scripts and when scripting Vim with Python. This feature is not
            related to folding or outlining and is completely independent from
            the rest of the plugin.
            See __PyLog__ BUFFER (|voom_Voomlog|) for details.

==============================================================================
QUICK DEMO (no installation needed)   [[[2~

Extract VOoM archive to any folder. Open "plugin/voom.vim" in Vim, and do >
    :so %
    :Voom
This will create Tree buffer for "voom.vim", which will become a Body buffer.

All VOoM mappings, except Return and Tab, are for Tree buffers only.

<Up>, <Down>, <Left>, <Right> arrow keys move around the Tree and select new
node (Normal mode).

<Return> selects node under the cursor and then cycles between Tree and Body.
So, to select another node, move to it with h, j, etc. and hit Return.

<Tab> cycles between Tree and Body windows without selecting node.

<Space> expands/contracts node without selecting it. Standard Vim folding
command (zo, zc, zR, zM, etc.) can be used as well.

Left mouse click in the Tree selects node. If the click is outside of headline
text, the node's expanded/contracted status is toggled.

Edit a headline (line with a start fold marker) in "voom.vim" and go back into
the Tree: the outline will be updated.

<C-Up>, <C-Down> move node or a range of sibling nodes up/down.
<C-Left>, <C-Right> promote/demote.

Execute the command :Voomhelp to see all commands and mappings.

To create outline for another buffer, execute the command :Voom for it: >
    :tab h netrw
    :Voom
Folder "voom_samples" contains some outlines to experiment with.
File "calendar_outline.txt" is a rather large outline for stress-testing
purposes: 3.1MB, 56527 lines, 4160 headlines.

To try Python Log Buffer feature: >
    :Vooml
    :py assert 2==3
    :py print VOOM.nodes
    :py print u'\u2248 \u2260'

==============================================================================
Limitations   [[[2~

==============================================================================
File size   [[[3~

VOoM outlining is not scalable to large outlines. The bottleneck is the brute
force update of the outline data. Such update, which scans Body for start fold
markers with levels and recreates outline, must be done whenever the user
enters a Tree buffer after modifying corresponding Body--we can't possibly
know what the user did with the Body while he was away from the Tree.

Sample outline "calendar_outline.txt" seems to be approaching the usable size
limit on my 2002 notebook (1.6GHz Pentium 4 Mobile): >
    3.2 Mb, 56527 lines, 4160 headlines.
When moving to Tree after modifying Body, the pause due to outline update is
noticeable but is still less than a second.

Browsing an outline is fast regardless of it's size. Outline operations are
also fast because they bypass global outline update unless "g:voom_verify_oop"
is set to 1.

In case of stress test file "calendar_outline.txt", the time-consuming step is
not just scanning for fold markers, but also comparing >4000 headlines between
the old and new outlines, or, if outlines are very different, setting all
lines in the Tree buffer. This means that even larger files can be outlined
comfortably if they have much fewer headlines.

==============================================================================
Numbered Markers: Pros and Cons   [[[3~

Start fold markers with levels have many advantages:
    - It's a built-in Vim folding method (:set fdm=marker).
    - Fast folding suitable for Mb-sized files with >1000 headlines.
    - More flexible than indent-based or syntax-based folding. Suitable for
      outlining of most file types, including source code.
    - Easy to parse in a script and to search for. Area after level number is
      a natural place for storing node attributes.
    - Fold markers without levels are handy for folding smaller regions.

One drawback of numbered fold markers is that inserting them is somewhat
awkward and slow. This is not a big deal if outline nodes have a lot of body
text: most of the time is spent writing body text rather than creating
headlines (also known as headings). For outlines that consist mostly of
headlines (e.g., a shopping list) an indent based outlining mode is more
appropriate. See VO (VimOutliner) and TVO (The Vim Outliner) plugins.

P.S. I wrote a simple plugin that helps insert start fold markers with levels:
http://www.vim.org/scripts/script.php?script_id=2891

==============================================================================
VOoM is not a 'filetype' plugin   [[[3~

This is a design philosophy rather than a limitation. VOoM is expected to work
with files of any 'filetype': source code, plain text notes, Vim help file, a
large wiki file, a custom GTD format. The command :Voom, which creates the
outline, does not modify the current buffer (Body) in any substantial way: it
does not set Body syntax highlighting, indent settings, folding settings,
mappings (with the exception of |voom_shuttle_keys|).

In contrast, other text outliners are usually geared toward taking notes and
managing tasks (VO, TVO, Emacs OrgMode). They use special format and typically
have features such as: custom syntax highlighting and folding, a tagging
system, clickable URLs, inter-outline linking, mappings to insert dates and
other things. VOoM does not provide such features because they should be
'filetype'-specific.

==============================================================================
Other Text Outliners  [[[2~

Leo outlining editor:
    http://webpages.charter.net/edreamleo/front.html
    - The __PyLog__ buffer, which is created by the command :Voomlog, is the
      equivalent of Leo's log pane.
    - The :Voomexec command is like Leo's Execute Script command when
      performed on a node which contains the @others directive.
    - Mark/Unmark nodes operations are modeled after identical Leo commands.

The "Tag List" Vim plugin:
    http://vim.sourceforge.net/scripts/script.php?script_id=273
    - Conceptually, VOoM is similar to the Tag List plugin and other source
      code browsers. Tag List uses the "ctags" program to scan file for tags.
      VOoM uses Python script to scan buffer for start fold markers with
      levels.

VO, VimOutliner:
    http://www.vimoutliner.org/
TVO, The Vim Outliner:
    http://vim.sourceforge.net/scripts/script.php?script_id=517

Various Vim scripts with outlining-like functionality
(there are probably many other):
    ywtxt : Ease vim to write plain documents
        http://www.vim.org/scripts/script.php?script_id=2993
    TxtBrowser : Browse plain text easily
        http://www.vim.org/scripts/script.php?script_id=2899
    TaskList.vim : Eclipse like task list
        http://www.vim.org/scripts/script.php?script_id=2607
    DotOutlineTree : Helps you edit structured text
        http://www.vim.org/scripts/script.php?script_id=1225
    calendar.vim : Calendar
        http://www.vim.org/scripts/script.php?script_id=52

    Vim command :vimgrep can be used to create an outline of current file: >
        :vimgrep /{{{/j %
        :copen

Code Browser:
    http://code-browser.sourceforge.net/

Emacs oultining modes, OrgMode seems to be popular:
    http://www.emacswiki.org/emacs/CategoryOutline

Listings of outliner programs:
    http://psychinnovations.com/psych/node/37
    http://www.marktaw.com/reviews/Outliners.html
    http://www.outlinersoftware.com/topics/viewt/807/0/list-of-outliners
    http://en.wikipedia.org/wiki/Category:Outliners

==============================================================================
Requirements   [[[1~
                                                 *voom_requirements*
VOoM uses Python and requires Python-enabled Vim 7.x, that is Vim compiled
with the Python interface. Your Vim is Python-enabled if it can do >
    :py print 2**0.5
    :py import sys; print sys.version

Python version should be 2.4 - 2.7 .
Python 3 is not supported and is not compatible with Vim anyway.

Vim version 7.2 or above is preferred. Version 7.1 should also work.
Version 7.0 might work as well but has not been tested.

Vim should be compiled using normal or bigger feature set.

Vim patch 7.2.161 is required in order to be able to work on the same outline
(or any buffer with folds) in separate tabpages.

==============================================================================
Vim and Python on Windows   [[[2~

Getting Vim and Python to work together on Windows can be a bit tricky, see
|python-dynamic|. Obviously, Python must be installed. Second, Vim must be
compiled with the Python interface (:echo has("python")). Finally, the version
of Python against which Vim was compiled must match installed Python version.
Command :version will show which Python version your Vim needs: there will be
string "python24.dll" if it's version 2.4, etc.

The easiest way to get Python-enabled Vim on Windows is as follows:
    - Install Python 2.6 from http://www.python.org/
    - Use Vim installer from http://sourceforge.net/projects/cream/files/
      (gVim Windows one-click installer) to install Vim 7.2.x. It installs the
      most up-to-date Vim compiled against Python 2.6. It includes most Vim
      features (huge version), including support for Perl, Ruby, etc.

Vim 7.2 Windows installer from vim.org, http://www.vim.org/download.php#pc,
installs Vim compiled against Python 2.4. To use it with Python 2.5 or 2.6 it
is necessary to replace gvim.exe and vim.exe. This can be done as follows:
    - Search the Internets for files "gvim.exe" and "vim.exe" compiled by
      others against your desired version of Python. Here are some sites (not
      tested):
      http://www.gooli.org/blog/gvim-72-with-python-2526-support-windows-binaries/
      http://wyw.dcweb.cn/
    - Compile your own gvim.exe and vim.exe. I tried to post the procedure
      that I use:
      http://vim.wikia.com/wiki/Build_Python-enabled_Vim_on_Windows_with_MinGW

==============================================================================
Installation   [[[1~
                                                 *voom_install*
Copy "plugin/voom.vim" and "plugin/voom.py" to the local plugin folder: >
    $HOME/vimfiles/plugin/   (Windows)
    $HOME/.vim/plugin/       (*nix)
Copy "doc/voom.txt" to the local doc folder. >
    $HOME/vimfiles/doc/      (Windows)
    $HOME/.vim/doc/          (*nix)
This will make commands Voom, Voomlog, Voomexec, Voomhelp available in any
buffer.

Execute the :helptags command to install "voom.txt" as Vim help and to
generate help tags, see |add-local-help|: >
    :helptags $HOME/vimfiles/doc
    :helptags $HOME/.vim/doc

VOoM can also be run from any directory without installing anything, see
Overview -> QUICK DEMO.

NOTE: VOoM uses quickload mechanism (|write-plugin-quickload|). The bulk of
the script "voom.vim" is sourced and Python module "voom.py" is imported only
after a Voom command is executed for the first time.

NOTE: When "voom.vim" is sourced, its Python code adds script's directory to
sys.path and then imports "voom.py". This creates file "voom.pyc". Command
:Voomexec, when executing a Python script, writes file "voomScript.py" also in
the "voom.vim" directory.

NOTE: If is recommended that the following line be put in .vimrc when using
Voom outlining on a regular basis: >
    let g:voom_verify_oop = 1
This option turns on verification of outline data integrity after every
outline operation. It will alert to outline corruption, which is very likely
if there is a bug in outline operation. This verification is disabled by
default because it's rather expensive when the outline is large (>500
headlines).

==============================================================================
Options   [[[1o~
                                                 *voom_options*
==============================================================================
Vim Options   [[[2~

'foldmethod' for the buffer for which the command :Voom is executed should be
"marker" (:set fdm=marker). This, however, is not required to create an
outline or to use it. Outline operations do not rely on Vim folds, they use
start fold markers with levels. Other folding options (|fold-options|), such
as 'foldtext', can be set according to personal preferences and are usually
'filetype'-specific.

'foldmarker' (local to window) is used by the command :Voom to obtain the
start fold marker string. There is rarely a reason to change this option from
default, which is {{{,}}} .

<LocalLeader> is used to start many outline operations while in a Tree buffer.
By default, it's backslash. For example, "\i" inserts new node. To change it
to another character, assign maplocalleader in .vimrc: >
     let maplocalleader=','

'scrolloff' should be 0 (default) or a small number (1 or 2). This global
option affects how the headline is positioned in Body window after selecting
node in Tree window. For example, after :set scrolloff=1, the headline will be
on the 2nd window line in Body window. A very large value can be confusing
when switching between Tree and Body windows.

Vim commands for creating and deleting folds are not very useful and are
potentially dangerous when typed accidentally. They can be disabled in .vimrc
as follows: >
     " Disable commands for creating and deleting folds.
     noremap zf <Nop>
     noremap zF <Nop>
     noremap zd <Nop>
     noremap zD <Nop>
     noremap zE <Nop>

Some color schemes (including default) use the same or similar background
colors for selected text (Visual), folded lines (Folded), and current line
(CursorLine) highlight groups. These highlight groups are used in Tree buffers
and it's better if they are easily distinguished from each other.

==============================================================================
VOoM Options   [[[2o~

These are VOoM-specific global variables that can be defined by users in their
.vimrc files. Example: >
    let g:voom_tree_placement = "top"
    let g:voom_tree_height = 14

==============================================================================
Window positioning [[[3~

g:voom_tree_placement   ~
    Where Tree window is created: "left", "right", "top", "bottom"
    This is relative to the current window.
    Default: "left"

g:voom_tree_width   ~
    Initial Tree window width.
    Default: 30

g:voom_tree_height   ~
    Initial Tree window height.
    Default: 12

g:voom_log_placement   ~
    Where __PyLog__ window is created: "left", "right", "top", "bottom"
    This is far left/right/top/bottom.
    Default: "bottom"

g:voom_log_width   ~
    Initial __PyLog__ window width.
    Default: 30

g:voom_log_height   ~
    Initial __PyLog__ window height.
    Default: 12

==============================================================================
Tree/Body shuttle keys   [[[3~
                                                 *voom_shuttle_keys*
Since VOoM emulates a two-pane outliner, it's important to have keys that
shuttle between the two panes. By default, such keys are <Return> and <Tab>.
These keys are used in buffer-local mappings in Trees (Normal and Visual
modes) and in Bodies (Normal mode).

These are the only keys that get mapped in Body buffer when the command :Voom
is executed.

Note that these keys have default meaning in Vim:

    <Return> moves cursor down, which is not very useful since "j" does almost
    the same thing.

    By default, <Tab>/CTRL-I in Normal mode goes to newer position in the jump
    list (opposite of CTRL-O, see |CTRL-I|). Thus, although tempting, mapping
    <Tab> is usually a bad idea. It seems that Ctrl-Tab still works like
    default <Tab>/CTRL-I, at least in GUI Vim, when <Tab> is mapped.

The following two settings allow to use keys or key combinations other than
<Return> and <Tab>.

g:voom_return_key   ~
    Mapping that selects node under the cursor and, if the node is already
    selected, shuttles between Tree and Body windows.
    Default: "<Return>"

g:voom_tab_key   ~
    Mapping that shuttles between Tree and Body windows without selecting
    node.
    Default: "<Tab>"

Example, use Ctrl-Return and Ctrl-Tab: >
    let g:voom_return_key = '<C-Return>'
    let g:voom_tab_key = '<C-Tab>'

==============================================================================
g:voom_verify_oop   [[[3~

g:voom_verify_oop   ~
    Verify outline after every outline operation.
    Default is 0 (disabled).
    Set to 1 to enable.

    It is recommended that this option be enabled when using Voom outlining on
    a regular basis. It will alert to outline corruption, which is very likely
    if there is a bug in outline operation. The downside is that there is a
    performance hit when the outline is large (>500 headlines).

==============================================================================
Customizing Tree and __PyLog__ buffers   [[[3~

When a Tree buffer is created, its 'filetype' is set to "voomtree"
When __PyLog__ buffer is created, its 'filetype' is set to "log".

This should allow user customization of these buffers (syntax, wrap/norwap,
list/nolist, etc.) via standard Vim configuration files: >
    $HOME/.vim/ftplugin/voomtree.vim
    $HOME/.vim/syntax/voomtree.vim
    $HOME/.vim/after/syntax/log.vim
    etc.

==============================================================================
Other Options   [[[3~

Most VOoM commands can be mapped to key shortcuts in .vimrc: >
    nnoremap <LocalLeader><LocalLeader> :Voom<CR>
    nnoremap <LocalLeader>n :Voomunl<CR>

To make Body headlines stand out, lines with fold markers can be highlighted.
Since I use .txt files for notes, I have the following line in .vimrc  >
    au BufWinEnter *.txt if &ft==#'text' | exe 'syn match ModeMsg /\V\.\*' . split(&fmr, ',')[0] . '\.\*/' | endif
This method is better than using syntax/txt.vim because it also works when a
nonstandard foldmarker is specified on file's modeline.

Option "g:voom_user_command" can be used to execute any user defined command
when file voom.vim is sourced. It does not exist by default. It is intended
for loading user add-ons. For details, see node
    Implementation notes -> Extending VOoM with add-ons

==============================================================================
# ALL MAPPINGS & COMMANDS #   [[[1x=  ~
                                                 *voom_map*
        MAIN COMMANDS~
:Voom               Create outline of the current buffer. |voom_Voom|
:Voomhelp           Open voom.txt as outline in a new tabpage. |voom_Voomhelp|
:Voomexec [vim|py]  Execute node or fold as [type] script. |voom_Voomexec|
:Voomlog            Create __PyLog__ buffer. |voom_Voomlog|

        SHUTTLE KEYS (BODY AND TREE BUFFERS)~
These mappings cycle between Tree and Body windows. Configurable by user.
Body: Normal mode. Tree: Normal and Visual modes. |voom_shuttle_keys|

<Return>            Select node under the cursor. If already selected, move
                    cursor to Tree or Body window. A Tree or Body window is
                    created in the current tabpage if there is none.

<Tab>               Move cursor to Tree or Body window.

        OUTLINE NAVIGATION (TREE BUFFER)~

<Up>                Move cursor Up and select new node. (n)

<Down>              Move cursor Down and select new node. (n)

<Right>             Traverse node's branch down: move to first child and
                    select it. (n)

<Left>              Traverse node's branch up: move to parent and select it.
                    If the node is expanded, it is contracted first. (n)

<LeftRelease>       This is mouse left button click.
                    Select node. Expand/contract node if click is outside of
                    headline text. (n)

<Space>             Expand/contract node without selecting it. (n)

zc, zo, zM, zR, zv, etc.
                    These are standard Vim folding commands.
                    They expand/contract nodes. See |fold-commands|.
                    Note: zf, zF, zd, zD, zE are disabled.

=                   Put cursor on currently selected node. (n)

+                   Put cursor on startup node (node marked with '=' in Body
                    headline). (n)

x                   Go to next marked node (find headline marked with 'x'). (n)

X                   Go to previous marked node. (n)

        OUTLINE OPERATIONS (TREE BUFFER)~

i I a A             Edit headline of node under the cursor. (n)

<LocalLeader>i      Insert new node after current node. (n)

<LocalLeader>I      Insert new node as first child of current node. (n)

<C-Up>
<LocalLeader>u      Move node(s) Up. (n,v)

<C-Down>
<LocalLeader>d      Move node(s) Down. (n,v)

<C-Left>
<<
<LocalLeader>l      Move node(s) Left (Promote). (n,v)

<C-Right>
>>
<LocalLeader>r      Move node(s) Right (Demote). (n,v)

        Cut/Copy/Paste operations use Vim + register (system clipboard)

dd                  Cut node(s). (n,v)

yy                  Copy node(s). (n,v)

pp                  Paste node(s) after current node. (n)

        Mark/Unmark nodes

<LocalLeader>m      Mark node(s): add 'x' to Body headlines. (n,v)

<LocalLeader>M      Unmark node(s): remove 'x' from Body headlines. (n,v)

<LocalLeader>=      Mark node as startup node: add '=' to Body headline
                    and remove '=' from all other headlines. (n)

        SAVE/RESTORE TREE BUFFER FOLDING (TREE BUFFER)~

:[range]VoomFoldingSave
                    Save Tree folding. |voom_VoomFoldingSave|

:[range]VoomFoldingRestore
                    Restore Tree folding. |voom_VoomFoldingRestore|

:VoomFoldingCleanup
                    Cleanup 'o' node marks: remove them from nodes without
                    children. |voom_VoomFoldingCleanup|

<LocalLeader>fs     Save Tree folding for current node and all descendant
                    nodes. Same as :VoomFoldingSave. (n)

<LocalLeader>fr     Restore Tree folding for current node and all descendant
                    nodes. Same as :VoomFoldingRestore. (n)

<LocalLeader>fas    Save Tree folding for entire outline.
                    Same as :%VoomFoldingSave. (n)

<LocalLeader>far    Restore Tree folding for entire outline.
                    Same as :%VoomFoldingRestore. (n)

        VARIOUS (TREE BUFFER)~

<LocalLeader>e      Execute node. Same as :Voomexec. (n)

<F1>                Open help file voom.txt as outline in a new tabpage.
                    Same as :Voomhelp. (n)

        VARIOUS (TREE OR BODY BUFFER)~

:Voomunl            Display node's UNL (Uniform Node Locator). |voom_Voomunl|

:Voomgrep [pattern(s)]
                    Search current outline for pattern and display results in
                    the quickfix window as list of UNLs of nodes with matches.
                    Performs boolean AND and NOT searches if there are several
                    patterns separated by words "and" or "not". Uses word at
                    cursor if no patterns are provided. |voom_Voomgrep|

There is a bunch of commented out commands in the "Commands" node of voom.vim.
They are useful only during VOoM development.

==============================================================================
OUTLINING (:Voom)   [[[1o~

==============================================================================
Create Outline   [[[2o~
                                                 *voom_Voom*
:Voom       This command constructs outline of the current buffer and displays
            it in a specially configured, non-modifiable buffer called Tree
            buffer. The current buffer becomes a Body buffer.

The current buffer (Body) is scanned for lines with start fold markers with
level numbers: {{{3, {{{1, etc. These lines, or headlines, are displayed
in the corresponding Tree buffer as an outline using an indent-based folding.
The level of each headline is set to the number after the fold marker.

NOTE: End fold markers with levels, }}}1, }}}3, etc., are ignored and should
not be used.

NOTE: Matching fold markers without level numbers, {{{ and }}}, are ignored.
They are handy for folding small areas inside numbered folds, e.g. parts of
functions. The region between {{{ and }}} should not contain fold markers with
levels.

Tree buffers are named {bufname}_VOOM{bufnr} where {bufname} and {bufnr} are
the name and number of the corresponding Body buffer. Tree buffers have their
'filetype' set to "voomtree".

A Tree buffer is displayed in a separate window which is configured to behave
as the tree pane of a two-pane outliner. Every line in a Tree buffer is
associated with a node of the corresponding Body.

A "node" is a Body buffer range that begins with headline (line with start
fold marker with level number) and ends before the next headline. The last
node ends with the last buffer line. The region from start of buffer to the
first headline (or end of buffer) is treated as a special node number 1 which
can have zero lines.

For best results, Body 'foldmethod' should be "marker" (|fold-marker|). If
this is the case, Body nodes are also folds. But this is not required: Body
buffer can use any folding method and its folds have no effect on outline
construction and outline operations.

When a headline is selected in a Tree window (<Return>, <Up>, <Down>, <Left>,
<Right>), the corresponding node is displayed in Body window. Nodes can be
manipulated from Tree window: deleted, moved, promoted, demoted, marked, etc.
Obviously, Body buffers can be edited directly as any other buffers with fold
markers.

The outline data and the Tree are updated automatically on entering the Tree
buffer (on |BufEnter|). The actual update happens if the Body has been
modified since the last update (when Body's |b:changedtick-variable| is
different). This update is the bottleneck that limits the size of outlines
that can be edited comfortably.

A Tree buffer is not modifiable and should never be edited directly. It has
many buffer-local mappings for navigating the outline and for performing
outline operations. Most of Vim standard Normal and Visual text change
commands are either disabled or remapped.

A Body buffer is not configured in any substantial way by the command :Voom.
It has only two VOoM-specific mappings: <Return> and <Tab> in Normal mode
(local to buffer). These mappings select node under the cursor and cycle
between Body and Tree windows. These two mappings can be changed by the user,
see |voom_shuttle_keys|. The user is responsible for setting all other Body
settings to his liking: folding, indenting, syntax highlighting and so on
(these are usually determined by Body 'filetype').

==============================================================================
About Fold Markers   [[[3~

The command :Voom does not create an outline of folds. It creates an outline
of start fold markers with level numbers. When Body has 'foldmethod' set to
"marker", lines in Tree buffer also represent Body folds.

The start fold marker string is obtained from window-local option 'foldmarker'
when outline is created with the command :Voom. For example, after >
    :set fmr=<<<,>>>
    :Voom
the outline will be created from lines with <<<1, <<<2, <<<3, etc.

'foldmarker' should not be changed while using an outline. If you change it,
make sure to recreate the outline: delete Tree buffer and execute the command
:Voom again.

VOoM scans only for _start_ fold markers with level numbers. End fold markers
with levels and fold markers without levels are ignored. This assumes that the
user follows certain rules of using fold markers. These rules make a lot of
sense and are similar to recommendations given in Vim help, see |fold-marker|.

1) Use start fold markers with levels, <<<1, <<<2, etc. to start new
   fold/node. These should correspond to important structures: parts and
   chapters in a book, functions and classes in a code.

2) DO NOT USE END FOLD MARKERS WITH LEVELS: >>>1, >>>2, etc. They are
   redundant and are hard to keep track of in a large outline.

3) Do use pairs of matching fold markers without level, <<< and >>>, to fold
   small areas of text (a screenful), such as parts of functions. Make sure
   the area doesn't contain any fold markers with levels.

Files that do have end fold markers with levels are ok for browsing with VOoM,
but outline operations will most definitely produce unintended results.
Consider the following structure: >
    node 0
        node 1   <<<1
            node 1.1 <<<2
        >>>1
    ? ? ? ?
    ? ? ? ?
        node 2   <<<1
        node 3   <<<1
Lines with ? are not part of any fold. But VOoM considers them part of node
1.1 and will move them accordingly when node 1.1 is moved. When node's level
is changed, only number after the start fold marker is updated.

==============================================================================
Special Node Marks   [[[3~
                                                 *voom_special_marks*
The following characters in Body headline immediately after the start fold
marker level number have special meaning. They are used by VOoM to indicate
node properties:
    'x'     - Node is marked. This is like a checked checkbox.
    'o'     - Node is opened (expanded). The corresponding Tree buffer fold
              will be opened when outline is created with the command :Voom.
              Obviously, this applies only to nodes with children.
    '='     - Startup node. This node will be selected when outline is created
              with the command :Voom.

Various VOoM mappings and commands read and write these special marks.

Each mark is optional, but the order must be xo= . Examples, assuming that
foldmarker is set to <<<,>>> : >
    headline <<<1xo=  --node is marked, opened, startup node
    headline <<<1xo   --node is marked, opened
    headline <<<1o    --node is opened
    headline <<<1x=   --node is marked, startup node

    headline <<<1=xo  --node is startup node, 'x' and 'o' are ignored
    headline <<<1 xo= --all marks are ignored

==============================================================================
~~~===--- Tree Headline Text ---===~~~  "#//% /*[[[3*/ ~

The headline text as displayed in a Tree buffer is constructed from the
corresponding Body headline as follows:
    - Part of the Body headline before the first start fold marker with level
      number is taken. If there is 'x' after level number (node is marked),
      'x' is displayed in the second column of Tree buffer.
    - Trailing white space and line comment chars #"/*% are removed.
    - Leading and trailing white space is removed.
    - Leading and trailing filler chars -=~ are removed.
    - White space is trimmed again.

This is done by makeOutline() in voom.py .

==============================================================================
Selected Node   [[[3~

At any moment, one node is designated as selected. It is marked by = character
in the Tree buffer. This is sort of like "current position" in a true two-pane
outliner.

In contrast, "current node" here means node under the cursor. Current node may
or may not be selected.

A node is selected by pressing <Return> (Tree or Body, Normal mode), or by
selecting new node in Tree window with arrow keys or mouse left button click.

It is possible to automatically select a node on startup. A startup node has
character '=' in Body headline after the level number and after optional 'x'
and 'o' marks. Tree mapping  <LocalLeader>=  inserts '=' in current node's
Body headline and removes '=' marks from all other headlines. Next time, when
outline is created by the command :Voom, the node with '=' will be
automatically selected.

Related Tree mappings, Normal mode:
=           Put cursor on currently selected node.
+           Put cursor on startup node, that is node marked with '=' in Body
            headline, if any. This will also warn if there are several such
            nodes. Mnemonic: + is Shift-=


Note: it would be nice to have current headline highlighted in the Tree buffer
(as Leo does). Sadly, Vim does not allow to apply syntax highlighting to
folded lines--the Folded hi group overrides all other highlighting. The
current headline is easy to highlight, but it doesn't work for contracted
nodes: >
    :syn match Pmenu /^=.\{-}|\zs.*/
This code is commented out in Voom_TreeConfigure().

==============================================================================
Delete Outline   [[[2~

To delete VOoM outline for a particular Body buffer: unload, delete, or wipe
out the corresponding Tree buffer (:bun, :bd, :bw). Tree buffers are
configured to be wiped out when deleted or unloaded.

When a Tree is wiped out, the associated Body buffer should become mostly as
it was before the outline creation. Buffer-local mappings and autocommands
created by the command :Voom are removed. Outline data associated with this
Body buffer (Vim and Python dictionary items) are deleted.

When a Body buffer is unloaded, deleted or wiped out, the corresponding Tree
buffer is wiped out.

==============================================================================
Outline Navigation   [[[2o~

The following mappings are defined for Normal mode, except <Return> and <Tab>
in Tree buffers, where they work both in Normal and Visual modes.

<Return>    - In Body buffer: select current node and show it in Tree window.
              If current node is already selected, move cursor to Tree window.
            - In Tree buffer: select current node and show it in Body window.
              If Body 'foldmethod' is marker, Body folds are closed so that
              only the selected node is visible (zMzvzt).
              If current node is already selected, move cursor to Body window.

              If the current tabpage has no windows with the required Body or
              Tree buffer, a new window is created. Thus, hitting <Return>
              after ":tab split" will create tabpage with a new outline view.

<Tab>       - In Body buffer: move cursor to window with the corresponding
              Tree buffer.
            - In Tree buffer: move cursor to window with the corresponding
              Body buffer.

Note: All Voom commands look for a Tree or Body window in the current tabpage
only. If windows are split, previous window (^Wp) is used if possible.

Note: <Return> and <Tab> are the only keys mapped by VOoM in Bodies. Other
keys or key combinations can be used by defining "g:voom_return_key" and
"g:voom_tab_key". See |voom_shuttle_keys|.

All other mappings are for Tree buffers only, Normal mode.

<Up>        Move cursor Up and select new node.

<Down>      Move cursor Down and select new node.

<Right>     Traverse node's branch down: move to first child and select it.

<Left>      Traverse node's branch up: move to parent and select it.
            If the node is expanded, it will be contracted first.

<LeftRelease>
            Mouse left button click. If the click is to the right or to the
            left of the headline text, select node and toggle its
            expanded/contracted state. If the click is on the headline text,
            just select node.

<Space>     Toggle node's expanded/contracted state without selecting it. Make
            node visible if it's hidden in a fold.

zc, zo, zM, zR, zv, etc.
            These are standard Vim folding commands. They expand/contract
            nodes. See |fold-commands|. zj and zk can also be useful.
            Note: zf, zF, zd, zD, zE are disabled in Trees.

=           Put cursor on currently selected node.

+           Put cursor on startup node (node marked with '=' in Body
            headline), if any. Warn if there are several such nodes.
            Mnemonic: + is Shift-=

x           Go to next marked node (find headline marked with 'x').

X           Go to previous marked node.

==============================================================================
:Voomunl   [[[3~
                                                 *voom_Voomunl*
:Voomunl    This commands displays UNL (Uniform Node Locator) of node under
            the cursor. The UNL string is also copied into register "n" for
            easy pasting.

The current buffer must be a Tree or a Body. If current buffer is a Body, the
outline data and the Tree will be updated if needed.

The term UNL is from Leo's unl.py plugin:
http://webpages.charter.net/edreamleo/plugins.html#unl-py
An UNL is like a path to the node. It lists headlines of all ancestor nodes.
Example: >
    Part 2 -> Chapter 4 -> Section 3 -> subsection 5

==============================================================================
:Voomgrep   [[[3~
                                                 *voom_Voomgrep*
:Voomgrep {pattern}
            Search Body buffer for {pattern} and display results in the
            |quickfix| window as a list of UNLs of nodes with matches.

:Voomgrep
            As above, but use word under the cursor for pattern, as when
            starting search with * or #.

:Voomgrep {pattern1} and {pattern2} and {pattern3} ...
            Boolean AND search. Search Body for each pattern and show nodes
            that match all patterns.

:Voomgrep not {pattern1} not {pattern2} not {pattern3} ...
            Boolean NOT search. Search Body for each pattern and show nodes
            that don't match any of the patterns.

:Voomgrep {pattern1} and {pattern2} not {pattern3} not {pattern4} ...
            Boolean AND and NOT searches combined.

The current buffer must be a Tree or a Body. If current buffer is a Body, the
outline data and the Tree are updated if needed. Searches are always performed
in Body buffer. If current buffer is a Tree buffer, the cursor moves to window
with the corresponding Body.

For each pattern, function |search()| is used to search the entire Body
buffer, from top to bottom. According to docs, 'ignorecase', 'smartcase' and
'magic' are used.

The search with each pattern stops after >10,000 matches are found. Results of
boolean searches are likely to be wrong in this case.

The results are displayed in the quickfix window (|quickfix-window|) as a list
of UNLs of nodes. For example, after executing >
    :Voomg Spam and ham not bacon
in "test_outline.txt" the result is: >
    || Voomgrep Spam {32 matches}  AND ham {5 matches}  NOT bacon {5 matches}
    test_outline.txt|130| n43:28|tests -> Voomgrep tests -> n43 lunch
    test_outline.txt|137| n44:2 |tests -> Voomgrep tests -> n44 dinner

Numbers after the file name are:
    - Body line number of the first match in this node
    - node number, that is node's Tree line number
    - number of matches in this node for all AND patterns

If the search was successful, the first AND pattern is copied into the search
register "@/" so that "n" and "N" commands and search highlight can be used.

PATTERNS AND BOOLEAN OPERATORS:

    - Patterns should not span several lines. Multi-line patterns are likely
      to produce meaningless results because they can span several nodes.

    - Operators AND and NOT that separate patterns are not case sensitive:
      they can be "and", "AND", "not", "NOT", "aND", etc.

    - Operators AND and NOT should not be combined or grouped. Command
      :Voomgrep ham and not spam
      searches for "ham" AND "not spam".

    - Whitespace around each pattern and around AND and NOT is ignored.
      Use "\s", "\t", "[ ]", "\%x20" to specify leading or trailing
      whitespace.

    - To include literal words "and" or "not" in a pattern: >
        :Voomgrep Spam and\ ham not\ bacon
        :Voomgrep Spam[ ]and ham[ ]not bacon
<
    - Patterns separated by AND and NOT are treated independently.
      Switches like \c, \v, \m, \zs, etc. affect only one pattern. For
      example, to do case-insensitive search for nodes with ham and spam: >
        :Voomgrep \cham and \cspam
<
TIPS:

    - The readability of UNLs in the quickfix window is much better when
      the -> separators are highlighted, see screenshot at
      http://vim-voom.webs.com/ . I have the following two lines in
      $HOME/vimfiles/after/syntax/qf.vim: >
          syn match Title / -> /
          syn match LineNr /| n\d\+:\d\+\s*|/
<
    - To avoid long paths in the quickfix window, set working directory to the
      current file, see
      http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file

==============================================================================
Outline Operations   [[[2o~

Outline operations are performed using Tree buffer-local mappings, that is
they are always performed in a Tree buffer.

When appropriate, operations are automatically applied to branches, that is to
top level nodes and all their descendant nodes. E.g., moving a node, moves the
node and all its descendants. The level numbers of the node and its
descendants are automatically adjusted to the new position in the outline.

Most operations can be performed on a range of sibling nodes using Visual
mode. The range is checked for being a valid range: all top level nodes should
be at the same level.

Where the moved or inserted nodes end up depends on the expanded/contracted
status of the node after which the nodes are inserted.  This should be obvious
and replicates default behavior of the tree pane in Leo outlining editor.

Most outline operations usually modify the corresponding Body buffer. Thus,
they are disabled if the Body is 'nomodifiable' or 'readonly'. The exceptions
are Copy and some other commands that never modify Body buffers.

An outline operation can be undone with one undo command in the corresponding
Body buffer.

==============================================================================
Edit Headline   [[[3~

The only way to edit headline text is to edit the corresponding Body line.

While in a Tree buffer, Normal mode:

i I a A             Start editing headline under the cursor. The cursor is
                    moved into Body window and placed on the first word
                    character before the fold marker in Body headline. To find
                    the first word char, pattern |/\<| is used.

Other common editing commands are disabled in Tree buffers.

==============================================================================
Insert New Node   [[[3~

To insert new node while in a Tree buffer (Normal mode):

<LocalLeader>i      Insert new node after current node.
<LocalLeader>I      Insert new node as first child of current node.

                    By default, the new headline is "---NewHeadline---".
                    The cursor is moved to Body window and placed on the new
                    headline, where it can be edited ("caw", "caW", etc.).

Often, it's easier to just edit Body buffer to insert a numbered fold marker.
I wrote a simple plugin that helps with that:
    http://www.vim.org/scripts/script.php?script_id=2891

==============================================================================
Move/Copy/Cut/Paste Nodes   [[[3~

<C-Up>
<LocalLeader>u      Move node(s) up.

<C-Down>
<LocalLeader>d      Move node(s) down.

<C-Left>
<<
<LocalLeader>l      Move node(s) left (promote).

<C-Right>
>>
<LocalLeader>r      Move node(s) right (demote).

dd                  Cut node(s).

yy                  Copy node(s).

pp                  Paste node(s) after current node. Normal mode only.

With the exception of Paste, these Tree buffer mappings are available in
Normal and Visual modes. In Visual mode, the range is checked for being valid:
top level nodes in the range must be siblings.

These commands always apply to branches, that is to top level nodes and all
their descendant nodes, even when only part of a branch is selected.

Cut/Copy/Paste commands use Vim's + register, that is system clipboard. The
Paste command checks clipboard for being a valid VOoM outline or a range of
sibling outlines. The first line in the clipboard must have start fold marker
with level number.

==============================================================================
Mark/Unmark Nodes   [[[3~

Marking node is like checking a checkbox. A node is marked/unmarked by
adding/removing 'x' in Body headline after the start fold marker level number
(|voom_special_marks|). The 'x' is also displayed in the Tree.

<LocalLeader>m      Normal mode: mark node under the cursor.
                    Visual mode: mark all nodes in the range.
                    'x' is inserted in Body headlines.

<LocalLeader>M      Normal mode: unmark node under the cursor.
                    Visual mode: unmark all nodes in the range.
                    'x' is removed from Body headlines.

The above commands apply to individual nodes only, not to their descendants.

To unmark all: ggVG<LocalLeader>M

Related Tree mappings, Normal mode:
x                   Go to next marked node.
X                   Go to previous marked node.

==============================================================================
Mark Node As Startup Node   [[[3~

<LocalLeader>=      Mark current node as startup node. Normal mode.

This command inserts '=' character in Body headline after the start fold
marker level number and after optional 'x' and 'o' marks
(|voom_special_marks|). The '=' mark is removed from all other Body headlines.
This mark affects only Voom startup: last node marked with '=' is selected
when outline is created for the first time by the command :Voom.

Related Tree mappings, Normal mode:
+                   Put cursor on the startup node, if any. Warn if there are
                    several such nodes. Mnemonic: + is Shift-=

==============================================================================
Save/Restore Tree Folding   [[[3~
                                                 *voom_VoomFoldingSave*
                                                 *voom_VoomFoldingRestore*
                                                 *voom_VoomFoldingCleanup*
Opened/closed folds in a Tree buffer are equivalent to expanded/contracted
nodes. VOoM allows to save and restore Tree buffer folding. To do this, it
relies on special marks in Body headlines: character 'o' immediately after the
start fold marker level number and after optional 'x' (|voom_special_marks|).
The 'o' mark indicates that the fold is opened. Such folds are opened
automatically on startup. (This help file uses 'o' node marks.)

The following commands execute only a Tree buffer. They read and write 'o'
marks in Body headlines.

:[range]VoomFoldingSave
                    Save Tree folding by writing 'o' marks in Body headlines.
                    If a range is supplied, this is done for individual nodes
                    in the range. Without a range, this is done for current
                    node and all descendant nodes.

:[range]VoomFoldingRestore
                    Restore Tree folding according to 'o' marks in Body
                    headlines. If a range is supplied, this is done for
                    individual nodes in the range. Without a range, this is
                    done for current node and all descendant nodes.

:VoomFoldingCleanup
                    Cleanup 'o' marks: remove them from nodes without
                    children. Such marks are redundant but harmless, they
                    don't do anything. This is done for the entire outline,
                    even if a range is supplied.

To save or restore folding for entire outline: >
    :%VoomFoldingSave
    :%VoomFoldingRestore

There as also the following Tree buffer mappings, Normal mode:

<LocalLeader>fs     Save Tree folding for current node and all descendant
                    nodes. Same as :VoomFoldingSave.

<LocalLeader>fr     Restore Tree folding for current node and all descendant
                    nodes. Same as :VoomFoldingRestore.

<LocalLeader>fas    Save Tree folding for entire outline.
                    Same as :%VoomFoldingSave.

<LocalLeader>far    Restore Tree folding for entire outline.
                    Same as :%VoomFoldingRestore.

Mnemonics for mappings:  Foldins Save/Restore, Folding All Save/Restore.

==============================================================================
Known Problems   [[[3~

There are some pitfalls to be aware of when editing very large outlines:

1) Memory used by Vim can increase significantly when outline operations Move
Up/Down are applied repetitively to a large node or a block of nodes (>1MB).
These commands delete and then insert lines in Body buffer. If the range being
moved is large, this can cause dramatic increase in memory used by the undo
history. Thus, to move a large node over a long distance it's better to use
Cut/Paste rather than keep pressing Ctrl-Up/Down.
This problem doesn't exist if 'undolevels' is set to -1, 0, 1.

2) Undoing some outline operations can take a longer than usual time if a
large number of Body folds (>1000) is affected. The workaround is to
temporarily set Body 'foldmethod' to manual (:set fdm=manual).

==============================================================================
EXECUTING NODES (:Voomexec)   [[[1~
                                                 *voom_Voomexec*
:Voomexec [type]        Execute text in the current node and descendant nodes
                        (Tree buffer) or in the current fold and subfolds (any
                        other buffer) as [type] script.
                        Supported types are: "vim", "python" or "py".
                        In Tree buffers Voomexec is mapped to <LocalLeader>e.

The following happens when the command :Voomexec is executed:

1) The type of script is determined.
-----------------------------------
    :Voomexec           Without an argument, the type of script is set to
                        buffer 'filetype': "python" if filetype is "python",
                        "vim" if filetype is "vim", etc. When executed from a
                        Tree buffer (also with <LocalLeader>e), filetype of
                        the corresponding Body is used.

    :Voomexec vim       Execute as "vim" script.

    :Voomexec python
    :Voomexec py        Execute as "python" script.

    :Voomexec whatever  Execute as "whatever" script.

    If script type is neither "vim" nor "python", the command aborts.
    It should be possible to add support for other script types.

2) The text of script is obtained.
---------------------------------
    a) If current buffer is a Tree buffer, the script text is set to that of
       the current node (including headline) and all descendant nodes. The
       actual folding in the corresponding Body buffer does not matter and
       fold markers without levels are ignored.

    b) If current buffer is not a Tree buffer, the script text is set to that
       of the current fold, including all subfolds. This obviously makes sense
       only if 'foldmethod' is "marker". If 'foldmethod' is not "marker", the
       command aborts and the script is not executed.

3) The script is executed according to its type.
-----------------------------------------------
    a) A "vim" script is executed by copying text into a register and
       executing that register inside try/catch/endtry block.

    b) A "python" script is executed by first writing text to file
       "voomScript.py" in the "voom.vim" directory.
       The file is then executed using execfile() inside try/except block.
       See http://docs.python.org/library/functions.html#execfile .
       The following Python names are pre-defined: vim, VOOM, voom.
       The first line of "voomScript.py" specifies encoding as per
       http://www.python.org/dev/peps/pep-0263/ . Encoding is obtained from
       Body's 'fenc' or, if it's empty, from 'enc'.

==============================================================================
sample Vim scripts   [[[2~

==============================================================================
Scripts in the following subnodes can be executed with >
    :Voome vim

"---node 1---[[[3o~
echo 'in node 1'

" section [[[
echo 'inside section in node 1'
" ]]]

"============================================================================~
"---node 1.1---[[[4o~
echo 'in node 1.1'

"============================================================================~
"---node 1.1.1---[[[5~
echo 'in node 1.1.1'

"============================================================================~
sample Python scripts   [[[2~

Scripts in the following subnodes can be executed with >
    :Voome py

==============================================================================
#---node 1---[[[3o~
print '   in node 1'

print 'buffer number:', vim.eval('bufnr("")')
print 'VOOM.buffers.keys():', VOOM.buffers.keys()
print 'voom.makeOutline() docstring:\n', voom.makeOutline.__doc__ ,'\n'
import os
print 'current working dir:', os.getcwd()

# section [[[
print '   inside section in node 1'
# ]]]

#============================================================================~
#---node 1.1---[[[4o~
print '   in node 1.1'

#============================================================================~
#---node 1.1.1---[[[5~
print '   in node 1.1.1'

#============================================================================~
Known Problems   [[[2~

1) Vim script code executed this way cannot use |line-continuation|.

2) When :Voomexec executes a Vim script with Python code and a Python error
occurs, Python traceback is not printed. However, Python traceback is printed
to the PyLog buffer if it is enabled. Example in the next fold can be executed
with ":Voome vim". >

    " Vim script with Python error [[[
    echo 'start of vim script'
    py print bogus_name
    py print 'py after error'
    echo 'the end'
    " ]]]

3) As the example above illustrates, Vim script is not terminated when an
error occurs in the Python code.

==============================================================================
__PyLog__ BUFFER (:Voomlog)   [[[1~
                                                 *voom_Voomlog*
:Voomlog        This command creates scratch buffer __PyLog__ and redirects
                Python stdout and stderr to that buffer.

Subsequent Python print statements and error messages are appended to the
__PyLog__ buffer instead of being printed on Vim command line.

PyLog windows in all tabpages are scrolled automatically when something is
printed to the PyLog buffer. If a tabpage has several PyLog windows, only the
first one is scrolled. If the current tabpage has no PyLog windows, the
Voomlog command can be used to create one.

To restore original stdout and stderr (that is Vim command line): unload,
delete, or wipeout the __PyLog__ buffer (:bun, :bd, :bw).

NOTE: the __PyLog__ buffer is configured to be wiped out when unloaded or
deleted.

The filetype of the PyLog buffer is set to "log". Some syntax highlighting is
added automatically to highlight Python error messages and common VOoM
messages.

When Python attempts to print a unicode string, e.g. >
    :py print u'ascii test'
    :py print u'\u042D \u042E \u042F \u2248 \u2260'
the string is encoded using the value of Vim option 'encoding' at the time
when the __PyLog__ buffer was created.

==============================================================================
Known Problems    [[[2~

1) All output lines appear in the __PyLog__ buffer simultaneously after the
script is finished, not in real time. Example (executable with :Voome py):

### demo Python code [[[
import time, datetime
print datetime.datetime.now()
time.sleep(5)
print datetime.datetime.now()
### ]]]

2) Visiting other tabpages is very slow on Linux in GUI Vim (GTK). It's better
to have PyLog only in the current tabpage.

3) __PyLog__ is not usable when in the Ex mode, that is after 'Q' or 'gQ'.
The lines in the __PyLog__ buffer will appear after the Ex mode is exited.

4) In versions before 1.7 there was problem with the output of help(), which
apparently uses Lib/pydoc.py, which does something strange to output trailing
\n. Steps to reproduce:
    1. Open new instance of Vim.
    2. Voomlog
    3. :py help(help)
    4. Wipe out __PyLog__ buffer to restore sys.stdout.
    5. :py help(help)
       An error occurs: '\n' is printed to the nonexisting log buffer.
The culprit is in Lib/pydoc.py:
    help = Helper(sys.stdin, sys.stdout)
The current workaround is to delete pydoc from sys.modules when changing
stdout and stderr.

==============================================================================
Implementation notes   [[[1~
                                                 *voom_notes*

==============================================================================
Why VOoM uses Python   [[[2~

The main reason VOoM uses Python is because some critical code is much faster
in Python than in Vim script.

Python scans buffer for fold markers >10 times faster than a similar Vim
script code. A demo code is given below. To test: select lines, copy into a
register, and execute that register while in any buffer with a large number of
fold markers, or in any large buffer.

Results with "calendar_outline.txt": >
    3.2MB, 56527 lines, 4160 headlines;
    Vim 7.2, Python 2.5, Win2k; Intel Pentium 4 Mobile, 1.6 GHz.

    Vim method 1: 1.48 sec
    Vim method 2: 0.14 sec
    Python:       0.09 sec

Vim method 2 is fast, but it's inconvenient to use because it requires cursor
to be in the Body buffer.

"""""""""""""""DEMO CODE START""""""""""""""""""""""""""""""""""""""""
" Get lines with fold marker followed by level number. This is the bare
" minimum that must be done to create an outline.

""""" Vim method 1
func! Voom_VimTest1()
    let headlines = []
    let allLines = getline(1,'$')
    for line in allLines
        if stridx(line, '{{{')==-1 "}}}
            continue
        endif
        if match(line, '{{{\d\+')!=-1 " }}}
            call add(headlines, line)
        endif
    endfor
    return len(headlines)
endfunc

""""" Vim method 2
func! Voom_VimTest2()
    let headlines = []
    g/{{{\d\+/ call add(headlines, getline('.'))     "}}}
    return len(headlines)
endfunc

""""" Python code, similar to Vim method 1
python << EOF
def Voom_PyTest():
    import vim
    import re
    re_marker = re.compile(r'{{{\d+')   #}}}
    headlines = []
    allLines = vim.current.buffer[:]
    for line in allLines:
        if not '{{{' in line: continue  #}}}
        if re_marker.search(line):
            headlines.append(line)
    vim.command('let nodes=%s' %len(headlines))
EOF

""""" timing
let start = reltime()
let nodes = Voom_VimTest1()
echo 'Vim method 1: ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'

let start = reltime()
let nodes = Voom_VimTest2()
echo 'Vim method 2: ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'

let start = reltime()
py Voom_PyTest()
echo 'Python:       ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'
"""""""""""""""DEMO CODE END""""""""""""""""""""""""""""""""""""""""""


In addition, Python's FOR loop is >30 times faster then Vim's. In the demo
code below the Python function is >60 times faster.

""""""" Vim FOR loop versus Python FOR loop """"""""""
func! Time_VimForLoop()
    let aList = range(1000000)
    for i in aList
        " pass
    endfor
endfunc

python << EOF
def Time_PyForLoop():
    aList =     range(1000000)
    for i in aList:
        pass
EOF

""" 9.76 sec """
let start = reltime()
call Time_VimForLoop()
echo 'Vim:    ' . reltimestr(reltime(start))

""" 0.15 sec """
let start = reltime()
py Time_PyForLoop()
echo 'Python: ' . reltimestr(reltime(start))
""""""""""""""""""""""""""""""""""""""""""""""""""""""

Thus, Python code should be much faster when handling large lists.

==============================================================================
Separate Trees or Single Tree   [[[2~

A single Tree buffer could be used to display outlines of many files. Tlist
does that. This makes sense when working with several related files. Also,
having a single Tree would be more like Leo.

VOoM creates new Tree buffer for every new outline. This is simpler. It is
more appropriate for text notes, when outline files are likely to be
unrelated. Searching headlines is easier.

==============================================================================
When to wipe out Tree buffer   [[[2~

A Tree buffer should be wiped out and the corresponding VOoM data deleted
after:

1) Body is wiped out. Tree has no reason to exist.
2) Body is deleted. Body buffer-local mappings are lost.
3) Body is unloaded or deleted. When Body is loaded again, its b:changedtick
   is different.
4) Tree is unloaded. All content is lost, Tree reverts to blank buffer.
5) Tree is deleted. As above, plus buffer local mappings are lost.

This is accomplished via BufUnload autocommands for Tree and Body.
BufUnload is also triggered on BufDelete and BufWipeout.

Also, when a buffer is unloaded but still exists, that is after :bunload and
:bdelete, there is potential for big trouble when trying to modify the buffer
via Python--see next node.

There are several fail-safe measures that ensure that nothing damaging will
happen if BufUnload autocommands are not triggered, as after "noa bun", "noa
bd", "noa bw". Tree and Body buffers are always checked for being loaded
(bufloaded()) during most Voom commands.

Functions Voom_ToBody() and Voom_ToTree(), which are called when selecting
nodes and before every outline operation, will detect if the Body or Tree
buffer is no longer loaded and will perform cleanup.

The b:changedtick check (see "Checking Bodies for ticks") also will prevent
potential troubles after improper unloading of Body with "noa bun!", etc.
This is because b:changedtick changes after unloading a buffer and loading it
again.

When Tree or Body local mappings and syntax are lost after "noa bd", it is
possible to restore them by executing the command :Voom from the Body buffer.

The PyLog buffer should also be wiped out when unloaded or deleted. There is a
check that ensures that PyLog is loaded before printing to it.

==============================================================================
unloaded buffer + python == trouble   [[[2~

Bad things happen when attempting to modify an unloaded buffer via Python
vim.buffer object. (This might be a Vim bug.) Example:
    - Create two buffers: buf1 and buf2. They can be new, no-file buffers.
    - With cursor in buf2
      :py buf2=vim.current.buffer
    - Buffer 2 can now be modified via Python:
      :py buf2[0]="xxxxxxxxx"
    - Unload buffer 2
      :bun!
      Buffer 1 is the current buffer.
    - Try writing to buffer 2, which is not loaded
      :py buf2[0]="yyyyy"
    - Buffer 1 is modified instead of buffer 2, and the change cannot be undone!
      Buffer 2 is no longer unloaded, so subsequent writes to it via buf2
      happen correctly.

VOoM's BufUnload autocommands ensure that Tree, Body, and PyLog buffers are
never unloaded when they are being written to. Buffers can become unloaded
when they are closed improperly with "noa bun" or "noa bd" or when something
goes wrong with autocommands. There are fail-safe checks that make sure that
the buffer is loaded (bufloaded()) before it is modified via Python.

==============================================================================
Checking Bodies for ticks   [[[2~

Tree buffer and associated outline data are updated on entering Tree via
BufEnter autocommand. To perform update only when the Body has changed since
the last update, Body's b:changedtick is used as shown in the docs.
Unfortunately, b:changedtick cannot be read with getbufvar(), so it's not
accessible from Tree on BufEnter. The workaround is to use Body's BufLeave
autocommand to save Body's b:changedtick. So the entire update scheme is:
    - on Body BufLeave save Body's b:changedtick as "tick"
    - on Tree BufEnter compare "tick_" to "tick"
    - if different, do outline update and set "tick_" to "tick"

The outline must be up to date when the cursor is in the Tree buffer. If it's
not, the consequences could be unpleasant. Performing outline operations will
cause data corruption.

Outline update can fail when something goes wrong with autocommands, e.g.,
when the user messes with 'eventignore'. Or, the Body file can be modified by
an external application while cursor is in Tree.

Fortunately, most Voom commands involve a visit from Tree to Body or vice
versa, so we can compare "tick_" directly to Body's "b:changedtick". If they
are different, the Tree buffer is wiped out and associated data are cleaned
up. Such check is performed during:
    - selecting node from Tree or Body
    - Voomgrep command initiated from Tree
    - during every outline operation, before modifying buffers
The function that does this check is Voom_BodyCheckTicks().

These checks can be tested by modifying Body and then moving to Tree with
":noau wincmd w" or after ":set ei=BufLeave", etc.

Another precaution is that outline update (voom.updateTree()) is always done
inside try/finally/endtry. This ensures that "tick_" will not be set to "tick"
when an error occurs during the update.

==============================================================================
Extending VOoM with add-ons   [[[2~

VOoM add-ons are Vim scripts that use voom.vim and voom.py functions and data.
Often, they can be sourced at any time, which means they can be placed in
$HOME/.vim/plugin/ like any other plugin. For finer control, user option
"g:voom_user_command" can be used to load add-ons only when voom.vim is being
sourced. This option defines a string to be executed via |execute|. This is
the last thing done in voom.vim: >
    if exists('g:voom_user_command')
        execute g:voom_user_command
    endif

There is no default "g:voom_user_command", it must be created in vimrc.

Example 1: Add-ons are located in $HOME/.vim/voom_add-ons/
To load them all via |runtime|, put this in vimrc: >
    let g:voom_user_command = "runtime! voom_add-ons/*.vim"

Example 2: Add-ons are in one file, D:/SCRIPTS/VOoM/voom_addons.vim
To source the file, put this in vimrc : >
    let g:voom_user_command = "source D:/SCRIPTS/VOoM/voom_addons.vim"

Python-side functions and data are available as attributes of voom and VOOM
respectively. All voom.vim functions are global and start with "Voom_".
Vim-side data are script-local. Two functions in voom.vim allow external
scripts to read voom.vim script-local data: Voom_GetBufInfo() and
Voom_GetData(). Sample add-on "voom_info.vim" shows how to use them.

Add-ons should create a command and/or global mapping. There is no easy way to
create a Tree-local mapping. It might be possible to use the fact that Tree
buffer filetype is set to "voomtree" and write a ftplugin.

Any command created by an add-on must first check that the current buffer is a
VOoM buffer (Tree or Body) and refuse to execute if it's not. It should update
outline if current buffer is a Body. Sample add-on "voom_info.vim" shows how
to do this.

==============================================================================
CHANGELOG   [[[2o~

v2.0, 2010-04-01   [[[3x~

The name of this plugin was changed from VOOF (Vim Outliner Of Folds) to VOoM
(Vim Outliner of Markers):
    - The new name is more accurate. It deemphasizes the role of folds. Body
      buffer folding has no effect on outline construction or on outline
      operations. Markers are determined by option "foldmarker", but only
      start fold markers with levels are used.
    - Voom sounds better than Voof, more energetic -- vroom-zoom-boom.
      (Look matey, this parrot wouldn't "voom" if I put four thousand volts
      through it.)

Corresponding changes were made in file names, commands, user options, help
tags, names of functions and variables. All occurrences of VOOF/Voof/voof were
changed to VOOM/Voom/voom: the command "Voof" became "Voom",
"g:voof_tree_placement" became "g:voom_tree_placement", and so on.

If you are upgrading from previous versions, please delete old "voof" files
(voof.vim, voof.py, voof.pyc, voof.txt), delete file "voofScript.py" if any,
edit user options in .vimrc if you have any, run :helptags.

Added rudimentary support for add-ons, sample add-on "voom_info.vim". See node
    Implementation notes -> Extending VOoM with add-ons
for details.

Added instructions for Windows users on how to get Python-enabled Vim.

Renamed some functions. Other minor code style changes.

There is an elusive bug in mouse left click Tree mapping. It seems it's
possible for <LeftRelease> to be triggered in a wrong buffer. Cannot
reproduce, has something to do with resizing windows.
FIX: added check that current buffer is Tree in Voom_TreeMouseClick().


v1.92, 2010-03-03   [[[3~

PROBLEM: outline operations Mark/Unmark, Move Right/Left can be slow when they
involve a large number of folds.
EXAMPLE: mark/unmark all nodes in calendar_outline.txt takes about 3 seconds.
But set Body foldmethod to "manual" and the time is reduced to 0.85 seconds.
Set Tree foldmethod to "manual" and the time is reduced further to 0.16 sec.
FIX: Set Tree and Body foldmethod to "manual" during Mark/Unmark. Set Body
foldmethod to manual during Move Right/Left. Other operations are not
susceptible.

Command :VoofFoldingSave is now much faster when applied to huge and deeply
nested branches with lots of closed folds. The problem was recursive function
foldingGet(). Got rid of recursion -- unnecessary and inefficient.
foldingGet() and foldingGetAll() were merged into foldingGet().

If Body "foldmethod" is not "marker", Body node could be hidden in fold after
selecting node.
FIX: do "zv" in Body after: selecting node in Tree, outline operations, on
startup. In other words, if foldmethod is marker, do "zMzvzt" to show selected
Body node. Otherwise do "zvzt".

Fixed stupid code in Voof_ToTreeOrBodyWin(), which is the <Tab> command -- no
need to visit all windows to find the target. It was causing confusion when
working with split windows.

Code tweaks to save precious microseconds:
voof.vim
    - Use stridx(line,'|') instead of match(line,'|') in various Tree
      functions, including foldexpr.
    - Compacted and simplified Tree foldexpr function.
voof.py
    - xrange() is now used in many places instead of other iteration methods.
    - Cleaned up some code, especially for outline operations.


v1.91, 2010-02-06   [[[3~
Command :Voofgrep can now perform boolean AND and NOT searches.

Increased maximum number of matches when doing Voofgrep to 10000 from 1000.

Annoyance: when outline is created, there can be unnecessary scrolling down in
the Tree window.
Fix: Voof_TreeCreate() code that puts cursor on startup node. Do "gg" before
jumping to startup node to counteract scrolling caused by fiddling with folds.
Don't do "zz" if the first or the last Tree line is in the window.

There were some "normal" in voof.vim. Changed all to "normal!".


v1.9, 2009-12-19   [[[3~
It's now possible to save and restore Tree buffer folding. This feature uses
special node marks 'o' in Body headlines. See |voof_VoofFoldingSave|.

New Tree mapping: + (Shift-=) finds startup node, if any, that is  node marked
with '=' in Body headline. Warns if there are several such nodes.

Command "Voofrun" was renamed "Voofexec".

Tree mapping for Execute Script was changed to "<LocalLeader>e" from
"<LocalLeader>r", which was in conflict with mapping for "Move Right".

Executing Python code via Voofexec: source code encoding is now specified on
the first line of script file as per http://www.python.org/dev/peps/pep-0263/.
Encoding is obtained from Body's 'fenc' or, if it's empty, from 'enc'.

Fixed bug in Voofexec: unsupported script type argument was ignored if
buffer's filetype was a supported script type. More informative message if
script type is unsupported.

Improved how the command Edit Headline (iIaA) positions cursor in Body
headline: "\<" is used instead of "\w" to find the first word char. This works
better with unicode.

"g:voof_tree_hight" and "g:voof_log_hight" were renamed "g:voof_tree_height"
and "g:voof_log_height" respectively.


v1.8, 2009-09-18   [[[3~
Bug in Normal mode mappings: nasty errors when attempting to use mapping with
a count, which is not supported, e.g., 3<Return>.
Fix: made all mappings start with ":<C-u>" to clear command line before
calling a function.

Added highlighting of warning and error messages.

Added fancy highlighting of Voofunl output: different highlights for headlines
and separators.

Correction in docs: <Tab>/CTRL-I is Vim default key for going forward in the
jumps list.

Distribution now follows Vim directory structure: there are /plugin and /doc
folders. Simplified Voofhelp accordingly: if voof.vim is in dir a/b, voof.txt
is assumed to be in a/doc.

Changed license to WTFPL, version 2.

v1.7, 2009-08-31   [[[3~
Checks that previously checked that Body or Tree buffer exists now check if
the buffer is loaded (bufloaded()). This is needed because bad things happen
when writing to an unloaded buffer via Python's vim.buffer.
See "Implementation notes -> unloaded buffer + python == trouble"

When killing Trees and PyLog do "bwipeout" instead of "bwipeout!" -- it's
sufficient and safer.

Adjusted how new Tree window is opened: previous window (^wp) is used if it
shows a Tree buffer.

PyLog:
Added fail-safe check that ensures PyLog buffer is loaded before being written
to. This can be tested by unloading PyLog with "noa bun" or "noa bd" and then
printing to it: py print "something".
Added workaround for a glitch with the output of help().
Made voof_logbnr variable script-local.

v1.6, 2009-08-23   [[[3~
Added checks to prevent data corruption when outline update fails for any
reason. When these checks fail, the Tree buffer is wiped out and outline data
are cleaned up. These checks can be tested as follows:
    - Create outline with the Voof command.
    - Delete some lines in Body buffer.
    - Move to Tree buffer with
      :noa wincmd w
    - Tree update did not happen and outline data are out of sync with the
      Body. In previous versions, performing outline operation at this stage
      would cause data corruption.
    - Select new node or try outline operation. Voof will issue error message,
      wipe out Tree buffer, and perform clean up.
Another way to test these checks is to modify Body file with an external
application while cursor is in the Tree window.
There is more details in "Implementation notes -> Checking Bodies for ticks".

Added some other foolproofing measures.

Improved automatic scrolling of PyLog buffer. Both previous (^wp) and current
window numbers are preserved in tabpages where PyLog is scrolled. Previously,
only current window number was preserved.

Fixed some bugs. Streamlined some code.

v1.5, 2009-08-15   [[[3~
New commands: Voofgrep, Voofunl.

Fixed blunder in "Move Down" outline operation that could cause outline
corruption. To find node after which to move, the cursor must be put on the
last node of the branch. That was done in Visual mode, but not in Normal mode.

<Return> and <Tab> in Tree buffers now also work in Visual mode.

Changed behavior of <Tab>: move cursor to Body window if current window is
Tree and vice versa. Previous behavior (cycle through all Body and Tree
windows) was less useful and inconsistent with <Return> behavior.

Added checks for Body foldmethod. If it's not "marker":
 - folds in Body are not collapsed (zMzv) after node selection in Tree and
   after outline operations;
 - Voofrun will refuse to run when executed while in Body buffer.

Made Tree buffers and PyLog buffer unlisted.

If possible, :Voofhelp command will open voof.txt via "tab help voof.txt"
command, so that tags will be active.

Made help tags start with "voof_".

Edited "Why VOoF uses Python": it turns out there is a fast, pure Vim method
to scan for headlines, but it's much less convenient than the Python way: >
    let headlines=[]
    g/{{{\d\+/ call add(headlines, getline('.'))       "}}}

code improvements [[[4~
The way "eventignore" was used to temporarily disable autocommands was unsafe.
"eventignore" is no longer set anywhere. "noautocmd" is used instead:
|autocmd-disable|.

Modified voof.voofUpdate() (formally treeUpdate) to work from any buffer as
long as the Tree is "ma". Voof_TreeBufEnter() now calls voof.voofUpdate()
directly.  Voof_BodyUpdateTree() updates Tree while in Body without moving to
Tree. This is extremely useful--can now use outline data while in Body.

Optimization in voof.voofOutline() parser function: >
    if not marker in line: continue
This makes sense because search with marker regexp is 3-4 times slower than
the above membership test, and in a typical outline most lines don't have
markers. Timing voof.voofUpdate() in Voof_TreeBufEnter(),
"calendar_outline.txt" update when headlines unchanged:
0.17 sec instead of 0.24 sec.

Changed Vim data variables voof_bodies, voof_trees, etc. from global to
script-local. Command VoofPrintData prints these for debugging purposes.
Should external scripts need to read these, a function that returns these
could be provided.

voof.computeSnLn() uses bisect--should be faster than previous naive code.

Changed <f-args> in Voofrun to <q-args> -- simpler.

PyLog code is, hopefully, near the state of perfection: when something goes
wrong, the exception info is displayed no matter what.

voof.oopMarkSelected() -- don't remove just one =, strip all consecutive

Voof_GetLines() uses winsaveview()/winrestview() to prevent scrolling after
zc/zo.

Use setreg() to restore registers exactly as shown in help.
Doing "let @z=z_old" is not reliable enough--register mode can change.


v1.4, 2009-07-12   [[[3~
New Tree navigation commands (Normal mode):
 x   Go to next marked node (mnemonic: find headline marked with 'x').
 X   Go to previous marked node.

"Unmark Node" operation now removes all consecutive 'x' chars from Body
headline instead of just one. This eliminates confusion when a bunch of 'x' is
present after start fold marker level number. For the same reason, "Mark Node
as Selected" (<LocalLeader>=) now strips 'x' chars after removed '=' char.

Bug: When Body starts with a headline, click on the first line in Tree (path
info line) doesn't select first node.
Fix: in Python code of Voof_TreeSelect() replaced
 nodeEnd =  VOOF.nodes[body][lnum]-1
   with
 nodeEnd =  VOOF.nodes[body][lnum]-1 or 1

Fixed errors in LogBufferClass write() method, printing messages when log
buffer doesn't exist.

Bug: Select more than one lines in Tree and press i/I/A/a. An error in
Voof_OopEdit() occurs.
Fix: Mapped i/I/A/a keys only for Normal mode with nnoremap. They were
mistakenly mapped with noremap.

A message is now printed when an outline operation is aborted because Body
buffer is readonly or nomodifiable.

Replaced most Python regions in voof.vim with voof.py functions.

Renamed some Python functions:
voof_WhatEver() means it's Python code for Voof_WhatEver() Vim function.

Voof_FoldLines() renamed Voof_GetLines().
Voof_FoldRun() renamed Voof_Run().

Various edits and additions in voof.txt.


v1.3, 2009-06-06   [[[3~
New: start fold marker string is obtained from Vim option 'foldmarker' when
the Voof command is run. Each Body buffer can have its own start fold marker.

Replaced Body's BufDelete autocommand with BufUnload autocommand. Tree buffer
is now wiped out when its Body is unloaded, deleted or wiped out. Corrected
Body and Tree BufUnload au functions: use "nested" and "noautocmd".

Added * to chars being stripped during headline construction to allow /**/
around fold markers. Better syntax highlight for commented headlines in Tree.

Changed how Tree buffer name is constructed: {bufname}_VOOF{bufnr} instead of
VOOF_{bufname}_{bufnr}.

When checking if current buffer is a Tree, instead of checking buffer name, do
has_key(g:voof_trees, bufnr('')).

When eventignore is set, save and restore original eventignore instead of
doing "set eventignore=" .

Annoyance: Moving Tree window to top/bottom (^W K/J) maximizes window height.
Fix: Don't set "winfixheight" when creating Tree window. I don't understand why
this happens. There is no such problem with "winfixwidth".

Got rid of Voof_ErrorMsg() and Voof_InfoMsg().

Expanded help file.

v1.2, 2009-05-30   [[[3~
Bug: after outline operation cursor may be on the last line of range instead
of first (if Visual and there is only one root node).
Fix: tweaked Voof_OopShowTree().

Re-wrote Voof_TreeToggleFold() to handle: no fold at cursor; cursor hidden in
fold.

Allow outline operation Copy when Body is noma or ro.

v1.1, 2009-05-26   [[[3~
Bug fix involving nomodifiable and readonly buffers.
Outline operations now silently abort if Body is noma or ro.

v1.0, 2009-05-25   [[[3~
Initial release.

==============================================================================
modelines   [[[1~
 vim:fdm=marker:fmr=[[[,]]]:ft=help:ai:et:noma:ro:
 vim:foldtext=getline(v\:foldstart).'...'.(v\:foldend-v\:foldstart):
