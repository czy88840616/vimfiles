# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	    ${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
	    ${3:// body...}
	}
# var Function
snippet vfun
	var ${1:function_name} = function (${2:argument}) {
	    ${3:// body...}
	};
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {
	    ${2://}
	}
	else {
	    ${3://}
	}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
	    case '${3:case}':
	        ${4:// code}
	        break;
	    ${5}
	    default:
	        ${2:// code}
	}
# case
snippet case
	case '${1:case}':
	    ${2:// code}
	    break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	    ${4:$1[$2]}
	}
# for (...) {...}
snippet forl
	for (var ${2:i} = 0, ${3:l} = ${1:Things}.length; $2 < $3; $2${4:++}) {
	    ${5:$1[$2]}
	}
# for (..in..) {...}
snippet fori
	for (var ${1:i} in ${2:Things}) {
	    ${3:$2[$1]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
	    ${4:$1[$2]}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
	    ${2:/* code */}
	}
# do...while
snippet do
	do {
	    ${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
	    ${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
snippet repeat
	setInteval(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
# Comments
snippet /**
	/**
	 * @${1:description} ${2} 
	 */
snippet @
	@${1} ${2} 
snippet @cls
	@class <h4>${2}</h4>
snippet @p
	@param {${1:Param Type?}} ${2:Param Name?} ${3:Param Description}
snippet cl
	console.log(${1});
snippet bug
	FIXME: [BUG #${1:BUGID}] ${2:DESCRIBE THE BUG HERE} 
snippet todo
	TODO: ${1:WHAT?}
snippet @todo
	<em>TODO</em>: 
	* <ol>
	*     <li>${1:WHAT WE NEED TODO NEXT?}</li>
	* </ol>
snippet zf
	// {{{
	${1://CODE HERE}
	// }}}
snippet //
	// ${1:COMMENTS} {{{
	// }}}
snippet class
	/**
	 * @class $1
	 */
	var ${1:classname} = function(${2:config}){
		var self = this,

			//Default Config
			_config = {
				${3://default_Config}
			},

			//Constructor
			_init = function(){
				$2 = S.merge(_config, $2);
				${4://Other Initial Logic}
			};

		_init();
		${5://Go on..}
	};
snippet add
	KISSY.add('${1:classname}', function(S, undefined) {
		var D = S.DOM, E = S.Event;

		${2://Go on..}
	});
snippet appadd
	${1:App}.add('${2:classname}', function(${3:O}, undefined) {
		var S = KISSY, D = S.DOM, E = S.Event;

		${4://Go on..}
	});
snippet tcadd
	KISSY.add('tc/mods/${1:mods}', function(S, undefined) {
		var D = S.DOM, E = S.Event;

		${3://preparing..}

		var re = {
			_init: function() {
				${2: // implementation}
			}
		};

		return re;
	}, {requires: [
		${4://requires}
	]});
snippet tcuse
	KISSY.use('tc/${1:mods/}', function(S, ${2:Mods,} undefined) {
		var D = S.DOM, E = S.Event;

		${2://Go on..}
	});
